#include "clt.h"
#include "gaussian.h"
#include "lcg.h"
#include <cmath>
#include <iostream>
#include <vector>

#include <matplot/matplot.h>

void plot_clt(int n_sum, int n_samples = 128) {
  // claude-gend
  //
  auto lcg = noise::LCG();
  auto clt = noise::CLTGenerator(lcg, n_sum);

  std::vector<double> signal;
  for (int i = 0; i < n_samples; i++) {
    signal.push_back(clt.generate());
  }

  // Create figure with subplots
  auto fig = matplot::figure(true);
  fig->size(1200, 400);

  // Showcase a signal over time randomly generated
  matplot::subplot(1, 2, 0);
  // start, stop, num_samples
  std::vector<double> sample_numbers =
      matplot::linspace(0, n_samples - 1, n_samples);
  matplot::stem(sample_numbers, signal);
  matplot::ylim({0, 12}); // otherwise just go to 1 (mean)
  matplot::xlabel("Sample number");
  matplot::ylabel("Amplitude");
  matplot::grid(matplot::on);

  matplot::subplot(1, 2, 1);
  auto h = matplot::hist(signal, 20);
  matplot::ylim({0, 12});
  matplot::xlabel("pdf");

  matplot::show();
}

int main() {

  plot_clt(1, 128);
  plot_clt(2, 128);
  plot_clt(4, 128);
  // should be basically gaussian; each sample generated by summing 12 value
  // from the RNG
  plot_clt(12, 128);
  /*
  auto gen = lcg.generate_uniform();

  for (int i = 0; i < 100; i++) {
    std::cout << lcg.generate_uniform() << std::endl;
  }

  std::cout << "\n\n";

  for (int i = 0; i < 100; i++) {
    std::cout << lcg.generate_uniform() << std::endl;
  }

  lcg.reseed();
  std::cout << "Reseed..." << "\n\n";

  for (int i = 0; i < 100; i++) {
    std::cout << lcg.generate_uniform() << std::endl;
  }
  */
  /*
  auto lcg = noise::LCG();
  auto gaussian = noise::GaussianGenerator(lcg);

  // generate 128 gaussian samples
  std::vector<double> samples;
  for (int i = 0; i < 10000; i++) {
    samples.push_back(gaussian.generate_gaussian());
  }

  auto h = matplot::hist(samples);
  matplot::title("Automatic binning");
  matplot::xlabel("Value");
  matplot::ylabel("Frequency");
  matplot::show();
  */

  /*
  // compute the samples mean
  double sum = 0.0;
  for (double x : samples)
    sum += x;
  double mean = sum / samples.size();

  // compute sample stddev
  double sum_sq = 0.0;
  for (double x : samples)
    sum_sq += (x - mean) * (x - mean);
  double stddev = std::sqrt(sum_sq / (samples.size() - 1));

  std::cout << "Mean of 10000 samples: " << mean << std::endl;
  std::cout << "Standard Deviation of 10000 samples: " << stddev << std::endl;
  */

  return 0;
}
